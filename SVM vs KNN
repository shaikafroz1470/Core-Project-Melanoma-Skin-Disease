import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Load your dataset (Replace 'your_dataset.csv' with the actual dataset file)
data = pd.read_csv('/content/melanoma.csv')

# Extract features and target
X = data[['anatomy', 'age', 'target', 'sex']].values  # You can include more features as needed
y = data['diagnosis'].values

# Set the number of iterations
num_iterations = 10

svm_accuracies = []
knn_accuracies = []

for iteration in range(num_iterations):
    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=iteration)

    # Initialize SVM and KNN classifiers
    svm_classifier = SVC(kernel='linear')
    knn_classifier = KNeighborsClassifier(n_neighbors=5)  # You can change the number of neighbors as needed

    # Train the classifiers
    svm_classifier.fit(X_train, y_train)
    knn_classifier.fit(X_train, y_train)

    # Make predictions
    svm_predictions = svm_classifier.predict(X_test)
    knn_predictions = knn_classifier.predict(X_test)

    # Calculate accuracies
    svm_accuracy = accuracy_score(y_test, svm_predictions)
    knn_accuracy = accuracy_score(y_test, knn_predictions)

    # Append accuracies to the lists
    svm_accuracies.append(svm_accuracy)
    knn_accuracies.append(knn_accuracy)

    # Print accuracy for each iteration
    print(f"Iteration {iteration + 1}: SVM Accuracy = {svm_accuracy * 100:.2f}%, KNN Accuracy = {knn_accuracy * 100:.2f}%")

# Plot the accuracies
labels = ['SVM', 'KNN']
accuracies = [np.mean(svm_accuracies), np.mean(knn_accuracies)]

plt.bar(labels, accuracies)
plt.xlabel('Classifier')
plt.ylabel('Average Accuracy')
plt.title(f'Comparison of SVM and KNN over {num_iterations} iterations')
plt.show()

# Print average accuracy over all iterations
if np.mean(svm_accuracies) > np.mean(knn_accuracies):
    print(f"\nAverage Accuracy: SVM has an average accuracy of {np.mean(svm_accuracies) * 100:.2f}%, which is relatively higher than KNN, which has an average accuracy of {np.mean(knn_accuracies) * 100:.2f}%")
else:
    print(f"\nAverage Accuracy: KNN has an average accuracy of {np.mean(knn_accuracies) * 100:.2f}%, which is relatively higher than SVM, which has an average accuracy of {np.mean(svm_accuracies) * 100:.2f}%")
